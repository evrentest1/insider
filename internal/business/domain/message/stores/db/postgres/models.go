// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type MessageSendingStatus string

const (
	MessageSendingStatusPending    MessageSendingStatus = "pending"
	MessageSendingStatusInProgress MessageSendingStatus = "in-progress"
	MessageSendingStatusSuccess    MessageSendingStatus = "success"
	MessageSendingStatusFailed     MessageSendingStatus = "failed"
)

func (e *MessageSendingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MessageSendingStatus(s)
	case string:
		*e = MessageSendingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MessageSendingStatus: %T", src)
	}
	return nil
}

type NullMessageSendingStatus struct {
	MessageSendingStatus MessageSendingStatus
	Valid                bool // Valid is true if MessageSendingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMessageSendingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MessageSendingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MessageSendingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMessageSendingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MessageSendingStatus), nil
}

type Message struct {
	ID          int64
	Content     string
	PhoneNumber string
	Status      MessageSendingStatus
	MessageID   sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}
