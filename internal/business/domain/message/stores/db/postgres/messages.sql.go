// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: messages.sql

package db

import (
	"context"
	"database/sql"
)

const getAllMessagesByStatus = `-- name: GetAllMessagesByStatus :many
SELECT id, content, phone_number
FROM messages
WHERE status = $1
ORDER BY created_at DESC
`

type GetAllMessagesByStatusRow struct {
	ID          int64
	Content     string
	PhoneNumber string
}

func (q *Queries) GetAllMessagesByStatus(ctx context.Context, status MessageSendingStatus) ([]GetAllMessagesByStatusRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllMessagesByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllMessagesByStatusRow
	for rows.Next() {
		var i GetAllMessagesByStatusRow
		if err := rows.Scan(&i.ID, &i.Content, &i.PhoneNumber); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByStatusWithLimit = `-- name: GetMessagesByStatusWithLimit :many
SELECT id, content, phone_number
FROM messages
WHERE status = $1
ORDER BY created_at ASC
LIMIT $2
`

type GetMessagesByStatusWithLimitParams struct {
	Status MessageSendingStatus
	Limit  int32
}

type GetMessagesByStatusWithLimitRow struct {
	ID          int64
	Content     string
	PhoneNumber string
}

func (q *Queries) GetMessagesByStatusWithLimit(ctx context.Context, arg GetMessagesByStatusWithLimitParams) ([]GetMessagesByStatusWithLimitRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByStatusWithLimit, arg.Status, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesByStatusWithLimitRow
	for rows.Next() {
		var i GetMessagesByStatusWithLimitRow
		if err := rows.Scan(&i.ID, &i.Content, &i.PhoneNumber); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessageId = `-- name: UpdateMessageId :exec
UPDATE messages
SET status = $1, message_id = $2, updated_at = NOW()
WHERE id = $3
`

type UpdateMessageIdParams struct {
	Status    MessageSendingStatus
	MessageID sql.NullString
	ID        int64
}

func (q *Queries) UpdateMessageId(ctx context.Context, arg UpdateMessageIdParams) error {
	_, err := q.db.ExecContext(ctx, updateMessageId, arg.Status, arg.MessageID, arg.ID)
	return err
}

const updateMessageStatus = `-- name: UpdateMessageStatus :exec
UPDATE messages
SET status = $1, updated_at = NOW()
WHERE id = $2
`

type UpdateMessageStatusParams struct {
	Status MessageSendingStatus
	ID     int64
}

func (q *Queries) UpdateMessageStatus(ctx context.Context, arg UpdateMessageStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateMessageStatus, arg.Status, arg.ID)
	return err
}
